# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Contract {
  """Address of the contract"""
  address: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Description of the contract"""
  description: String!
  id: ID!

  """Metadata of Contract"""
  metadata: JSON!

  """Name of the contract"""
  name: String!

  """Network Name"""
  networkName: String!

  """Transaction hash of Contract Deployment"""
  transactionHash: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input CreateContractInput {
  """Address of the contract"""
  address: String!

  """Network Slug"""
  chainId: Int!

  """Description of the contract"""
  description: String!

  """Metadata of Contract"""
  metadata: JSON!

  """Name of the contract"""
  name: String!

  """Network Name"""
  networkName: String!

  """Network Slug"""
  networkSlug: String!

  """Network Slug"""
  rpcUrl: String!

  """Network Slug"""
  rpcUrlws: String!

  """Transaction hash of Contract Deployment"""
  transactionHash: String!
}

input CreateDaoInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Dao {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  imageUrl: String!
  metadataUrl: String!
  name: String!
  ownerId: String!
  resolver: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  uploadedIPFS: Boolean!
}

input GenerateNonce {
  address: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Mutation {
  createContract(createContractInput: CreateContractInput!): Contract!
  createDao(createDaoInput: CreateDaoInput!): Dao!
  generateNonce(data: GenerateNonce!): Nonce!
  refreshToken(token: JWT!): Token!
  removeContract(id: Int!): Contract!
  signupOrLogin(data: SignupInput!): Auth!
  updateContract(updateContractInput: UpdateContractInput!): Contract!
  updateDao(updateDaoInput: UpdateDaoInput!): Dao!
  updateUser(data: UpdateUserInput!): User!
}

type Nonce {
  """Address for Nonce"""
  address: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Nonce"""
  nonce: String!

  """Success of Nonce Generation"""
  success: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Query {
  contract(id: Int!): Contract!
  contracts: [Contract!]!
  dao(id: Int!): Dao!
  me: User!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  address: String!
  email: String
  firstname: String
  lastname: String
  signature: String!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateContractInput {
  """Address of the contract"""
  address: String

  """Network Slug"""
  chainId: Int

  """Description of the contract"""
  description: String
  id: Int!

  """Metadata of Contract"""
  metadata: JSON

  """Name of the contract"""
  name: String

  """Network Name"""
  networkName: String

  """Network Slug"""
  networkSlug: String

  """Network Slug"""
  rpcUrl: String

  """Network Slug"""
  rpcUrlws: String

  """Transaction hash of Contract Deployment"""
  transactionHash: String
}

input UpdateDaoInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  address: String!
  categories: [String!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  files: [File!]
  firstname: String
  id: ID!
  lastname: String
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}