datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model DAO {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  name              String
  description       String
  blockchainDaoId   String     @default("not_set")
  adminAddress      String
  adminId           String
  admin             User?      @relation(name: "admin", fields: [adminId], references: [id])
  profilePicture    String
  backgroundPicture String?
  resources         File[]
  categories        Category[]
  tags              Tag[]      @relation("tags")
  metadata          Json?
  participants      String[] /// UserIds
  files             String[] /// FileIds
  activeCampaigns   Campaign[]
  socials           Social[]
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  email         String?    @unique
  address       String     @unique
  nonce         String
  firstname     String?
  lastname      String?
  about         String?
  socials       Social[]
  files         File[]
  adminOf       DAO[]      @relation("admin")
  participantOf Json[]
  role          Role
}

model File {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedIPFS Boolean  @default(true)
  name         String
  owner        User?    @relation(fields: [ownerId], references: [id])
  ownerId      String?
  dao          DAO?     @relation(fields: [daoId], references: [id])
  daoId        String?
  metadataUrl  String?
  metadataCid  String?
  imageUrl     String?
  imageCid     String?
  metadata     Json?
  resolver     String?
}

model Social {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  icon      String
  url       String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  daoId     String?
  dao       DAO?     @relation(fields: [daoId], references: [id])
  other     Json?
}

model Contract {
  id            String    @id @default(cuid())
  name          String
  abi           Json
  address       String
  networkName   String
  explorerUrl   String
  networkSlug   String
  chainId       Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Campaign {
  id                   String     @id @default(cuid())
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  title                String
  subtitle             String
  campaignId           String
  transactionHash      String
  category             Category[] @relation("category")
  subCategory          Category[] @relation("subcategory")
  images               String[]
  videos               String[]
  tokenCurrency        String
  tokenCurrencyAddress String
  minAmount            String
  goalAmount           String
  completionDate       String
  country              String
  city                 String
  state                String
  metadata             Json?
  daoId                String
  dao                  DAO        @relation(fields: [daoId], references: [id])
  categoryId           String?
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  dao       DAO[]    @relation(name: "tags")
}

model Category {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ownerId      String
  name         String     @unique
  daos         DAO[]
  campaigns    Campaign[] @relation("category")
  subCampaigns Campaign[] @relation("subcategory")

  type TypeCategory @default(CATEGORY)
}

model PendingNonce {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String?  @unique
  nonce     String
}

enum TypeCategory {
  CATEGORY
  SUBCATEGORY
}

enum Role {
  ADMIN
  USER
}
